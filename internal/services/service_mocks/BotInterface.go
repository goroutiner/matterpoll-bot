// Code generated by mockery v2.53.3. DO NOT EDIT.

package service_mocks

import (
	model "github.com/mattermost/mattermost-server/v6/model"
	mock "github.com/stretchr/testify/mock"
)

// BotInterface is an autogenerated mock type for the BotInterface type
type BotInterface struct {
	mock.Mock
}

// CreateCommand provides a mock function with given fields: cmd
func (_m *BotInterface) CreateCommand(cmd *model.Command) (*model.Command, *model.Response, error) {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommand")
	}

	var r0 *model.Command
	var r1 *model.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.Command) (*model.Command, *model.Response, error)); ok {
		return rf(cmd)
	}
	if rf, ok := ret.Get(0).(func(*model.Command) *model.Command); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Command)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Command) *model.Response); ok {
		r1 = rf(cmd)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*model.Command) error); ok {
		r2 = rf(cmd)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreatePost provides a mock function with given fields: post
func (_m *BotInterface) CreatePost(post *model.Post) (*model.Post, *model.Response, error) {
	ret := _m.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *model.Post
	var r1 *model.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.Post) (*model.Post, *model.Response, error)); ok {
		return rf(post)
	}
	if rf, ok := ret.Get(0).(func(*model.Post) *model.Post); ok {
		r0 = rf(post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Post) *model.Response); ok {
		r1 = rf(post)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(*model.Post) error); ok {
		r2 = rf(post)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTeamByName provides a mock function with given fields: teamName, etag
func (_m *BotInterface) GetTeamByName(teamName string, etag string) (*model.Team, *model.Response, error) {
	ret := _m.Called(teamName, etag)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByName")
	}

	var r0 *model.Team
	var r1 *model.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Team, *model.Response, error)); ok {
		return rf(teamName, etag)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Team); ok {
		r0 = rf(teamName, etag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *model.Response); ok {
		r1 = rf(teamName, etag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(teamName, etag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListCommands provides a mock function with given fields: teamId, customOnly
func (_m *BotInterface) ListCommands(teamId string, customOnly bool) ([]*model.Command, *model.Response, error) {
	ret := _m.Called(teamId, customOnly)

	if len(ret) == 0 {
		panic("no return value specified for ListCommands")
	}

	var r0 []*model.Command
	var r1 *model.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, bool) ([]*model.Command, *model.Response, error)); ok {
		return rf(teamId, customOnly)
	}
	if rf, ok := ret.Get(0).(func(string, bool) []*model.Command); ok {
		r0 = rf(teamId, customOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Command)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) *model.Response); ok {
		r1 = rf(teamId, customOnly)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, bool) error); ok {
		r2 = rf(teamId, customOnly)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetToken provides a mock function with given fields: token
func (_m *BotInterface) SetToken(token string) {
	_m.Called(token)
}

// NewBotInterface creates a new instance of BotInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBotInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BotInterface {
	mock := &BotInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
