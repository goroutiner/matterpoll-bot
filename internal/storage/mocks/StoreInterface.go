// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entities "matterpoll-bot/entities"

	mock "github.com/stretchr/testify/mock"
)

// StoreInterface is an autogenerated mock type for the StoreInterface type
type StoreInterface struct {
	mock.Mock
}

// ClosePoll provides a mock function with given fields: pollId, userId
func (_m *StoreInterface) ClosePoll(pollId string, userId string) (string, error) {
	ret := _m.Called(pollId, userId)

	if len(ret) == 0 {
		panic("no return value specified for ClosePoll")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(pollId, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(pollId, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pollId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePoll provides a mock function with given fields: poll
func (_m *StoreInterface) CreatePoll(poll *entities.Poll) error {
	ret := _m.Called(poll)

	if len(ret) == 0 {
		panic("no return value specified for CreatePoll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Poll) error); ok {
		r0 = rf(poll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePoll provides a mock function with given fields: pollId, userId
func (_m *StoreInterface) DeletePoll(pollId string, userId string) (string, error) {
	ret := _m.Called(pollId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePoll")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(pollId, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(pollId, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pollId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPollResult provides a mock function with given fields: pollId
func (_m *StoreInterface) GetPollResult(pollId string) (string, error) {
	ret := _m.Called(pollId)

	if len(ret) == 0 {
		panic("no return value specified for GetPollResult")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(pollId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pollId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pollId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vote provides a mock function with given fields: voice
func (_m *StoreInterface) Vote(voice *entities.Voice) (string, error) {
	ret := _m.Called(voice)

	if len(ret) == 0 {
		panic("no return value specified for Vote")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Voice) (string, error)); ok {
		return rf(voice)
	}
	if rf, ok := ret.Get(0).(func(*entities.Voice) string); ok {
		r0 = rf(voice)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entities.Voice) error); ok {
		r1 = rf(voice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStoreInterface creates a new instance of StoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoreInterface {
	mock := &StoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
